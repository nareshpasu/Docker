
Docker & kubernetes introduction
================================

Syllabus
========

Docker
======

-->Docker Introduction
-->Containerization Vs Virtualization
-->Docker Installation & It’s Architecture
-->Docker Adhoc Commands
-->Docker file
-->Docker Image
-->Docker Container
-->Docker Networks
-->Docker Volumes
-->Docker file & It’s KeyWords
-->Docker Images creation
-->Docker Registries (Docker Hub, ECR, Nexus)
-->Docker Compose






Kubernetes
==========

Kubernetes Introduction
Architecture
Kubernetes Cluster(Self-Managed) Setup Using Kubeadm.
Kubernetes Namespace
Kubernetes Objects
POD
Replication Controller
Replica Set
Daemon Set
Deployment
Rolling Update
Recreate
 Stateful Set
 Service
 Persistent Volumes
Persistent Volume Claim
Dynamic Volumes
ConfigMaps &Secrets
HPA& Metrics Server
Liveness & Readines probes
Scheduling& Maintenance
Node Selector
Node Affinity
Pod Affinity & Anti Affinity
Taints &Tolerations
Resource Quota & Limit Range
Network Policies
EKS Kubernetes Cluster Setup
Load balancer Service
Ingress Controller & Resource
Kubernetes RBAC
Deploy Application using Jenkins(CI/CD).
Helm
Monitor Kubernetes Using Prometheus and Grafana.


================================================================

what is Docker?
===============
--> Docker is a popular platform for developing, shipping, and running applications using containerization technology. Containers allow you to package an application along with all its dependencies (such as libraries and configuration files) into a single component.



Similar tools like docker
=========================
podman, rocket, core os , etc


--> Docker available in two types
1. community edition [Open source and free]
2. enterprise edition [commercial]

Vendor: Docker Inc
Type: containerization

Ex: git -- SCM tool
    ant/maven/gradle -- Build tools
    Jenkins/Bomboo/Travis CI -- CICD tools
    Docker/core os/rocket --> containerization tools

OS: Docker is cross platform(Docker can be installed in any os)














Installtion of docker
=====================

https://www.docker.com/   -->offical website

https://docs.docker.com/  --> for documentation


step 1: Create one ec2 instance of type ubuntu. 

step 2: connect to that server.


step 3: 

   sudo apt update -y
   sudo curl -fsSL https://get.docker.com -o install-docker.sh
   sudo sh install-docker.sh

       or
   sudo apt update -y
   sudo apt  install docker.io -y

       or
   sudo apt update -y
   sudo curl -fsSL https://get.docker.com | /bin/bash

step 4:

docker -v   --> to check the version
 

docker info, docker ps, docker images --> we are getting some errors due to permission issues to ubuntu user becz its normal user, But root user we will not get any errors.

step 5: check the docker is running or not

ps -ef|grep -i "dockerd"
   
     or
sudo service docker status

step 6:

sudo usermod -aG docker ubuntu

step 7: docker ps --> eventhough we added we are getting permission denied.

  exit and reconnect to the sever.

docker ps --> As a normal user also can run the docker commands.


==================================================================================

Docker architecture
===================


1. Docker Engine
-----------------
Docker Engine is the core component of Docker, responsible for building, running, and managing containers. It has two main parts:

Docker Daemon (dockerd): This is the background service that manages Docker containers and images. It handles container orchestration, image management, and network configuration. 

The Docker Daemon listens for Docker API requests and can communicate with other Docker Daemons to manage containers across multiple hosts.

2.Docker CLI (docker):
---------------------
The Docker Command Line Interface (CLI) is the tool used by developers and administrators to interact with the Docker Daemon. Commands like docker run, docker build, and docker ps are executed via the CLI to manage containers and images.

3. Docker Images
-----------------
Description: Docker images are the blueprints for Docker containers. They contain the application code, libraries, dependencies, and the runtime environment needed to run a specific application. Images are immutable and can be versioned and shared.

Layers: Docker images are built in layers. Each layer represents a set of changes or instructions in the image's Dockerfile. Layers are cached and reused, which helps in optimizing storage and build times.

4. Docker Containers
---------------------
Description: Containers are instances of Docker images. They are lightweight, portable, and run the application in isolation from the host system and other containers. Each container has its own filesystem, network stack, and process space.

Isolation: Containers use operating system-level virtualization to provide isolation. They share the host OS kernel but run in separate user spaces.

5. Docker Registry
------------------
Description: A Docker Registry is a storage and distribution system for Docker images. Docker Hub is the default public registry provided by Docker. There are also private registries, such as Docker Registry (open-source), or enterprise solutions like Docker Trusted Registry.

Operations: Registries handle pushing and pulling of images. When you build an image, you can push it to a registry so that it can be shared with others or used in different environments. Conversely, you can pull images from a registry to deploy them on into different environment.


NOTE: Registry contains collection of repositories.

we can manage these docker registry's by our self like nexus, Jfrog etc

Managed docker registories
===========================
ECR --> Elastic container registry(AWS)
ACR --> Azure container registry(Azure)
GCR --> Google container registry(GCP)

Docker repository --> we can maintain(Store) docker image with same name with different 		      tag(version)





==================================================================================

docker flow
===========


docker images

docker ps or docker container ls

docker run -d -p 80:80 --name nginxcontaner nginix:latest


docker run -d -p 80:80 --name tomcatcontainer tomcat:latest


netstat -tunlap
sudo apt install net-tools
netstat -tunlap

docker exec tomcat ls webapps   --> no host folder in latest version

docker exec tomcat ls java -version --> to see the java version


=========================================

docker rm -f tomcat 

docker run -d -p 8080:8080 --name tomcat tomcat:6.0.43-jre8

docker exec tomcat ls webapps


===========================================







docker objects
===============

### Summary of Docker Objects

- **Containers**: Running instances of images.
- **Images**: Read-only templates used to create containers.
- **Volumes**: Persistent storage for container data.
- **Networks**: Facilitate communication between containers and with external systems.
- **Registries**: Storage and distribution points for images.
- **Dockerfile**: Defines how to build a Docker image.
- **Docker Compose**: Manages multi-container Docker applications.

=========================================================================


IQ] what is docker build context?

In Docker, the build context is the set of files and directories that are available to the Docker engine when building a Docker image.


practical session to undestand docker
=====================================

step 1: check in your server docker is installed or not

step 2:
     
   git clone https://github.com/kkeducation12345/maven-web-app-project-kk-funda.git

   cd maven-web-app-project-kk-funda

step 3: 

   sudo apt install maven -y   --> It will install maven and jre
 
    java --version
    mvn -version

step 4: Build the artifactory

     mvn clean package

    
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>3.3.2</version> <!-- Use a stable version -->
        </plugin>
    



step 5: to build the docker image; please make sure to create a docker file.

      vi Dockerfile
  
      FROM tomcat:8.0.21-jre8
      COPY target/maven-web-application.war /usr/local/tomcat/webapps/maven-web-application.war
   
      docker build -t kkeducation12345/java-web-app .

step 6: To list the images
   
      docker images or docker image ls

step 7: Push the image to docker hub

    NOTE: Before pushing image we need to authenticate 

    docker login -u kkeducation12345 -p password

    docker push kkeducation12345/java-web-app

step 8: How to run a container from an image

    docker run -d -p 8080:8080 --name javawebapp kkeducation12345/java-web-app

step 9: Access the application

docker ps -a  --> To list the containers



===============================================================================================

Go inside the container
-----------------------

docker exec -it javawebapp /bin/bash


=============================================================================


commands
========

docker info 
docker --version or docker version

image related
=============

How to build docker image
-------------------------

docker build -t <image> <buildContext>

docker build -t kkeducation123456/java-web-app:1 .
docker build -t nexus.jio.com/java-web-app:1 .

docker build -f customName kkeducation123456/java-web-app:1 .


How to list the images
----------------------

docker images or docker image ls

How to login docker hub
-----------------------

docker login -u username -p password

docker info

cat password |docker login -u kkeducation12345 --password-stdin

How to logout 
-------------

docker logout
docker info


How to push an docker image
---------------------------
docker push kkeducation123456/java-web-app:1 .


How to pull the image
---------------------

docker pull kkeducation123456/java-web-app:1

to see more details about image
-------------------------------

docker image inspect <imageid/imageName>

To see the layers of an image
-----------------------------

docker history <imageId/ImageName>

How to delete image
-------------------

docker rmi <image_id/Image_name>


How to delete multiple images?
------------------------------

docker rmi <image1> <image2>

How to delete all the images
----------------------------

docker rmi -f $(docker images -q)

what is dangling images?
------------------------

How to display only dangling images?
------------------------------------

docker images -f dangling=true

how to delete all the dangling images?
---------------------------------------

docker rmi -f $(docker images -q -f dangling=true)



docker system prune
docker image prune
docker container prune
docker network prune
docker volume prune



docker tag
-----------

docker tag customname kkeducation123456/java-web-app:1



docker system df
----------------


How to move image from one server to another server?
----------------------------------------------------

Approach 1: Use the nexus/Jfrog/DTR/ECR

Approach 2:

   docker save -o <filename>.tar <imageId>
   scp filename.tar ubuntu@172.34.42.78:/home/ubuntu

  docker load -i filename.tar


=========================================================================================


Container commands
==================

How to create a container?
--------------------------

docker create : It will create a container, But it will not start the container(process)

docker run : It will create a container and it will start the container(process)

docker create -p 8080:8080 --name javawebapp kkeducation12345/java-web-app

docker start javawebapp

docker run -d -p 8080:8080 --name javawebapp1 kkeducation12345/java-web-app


How to list the running containers?
-----------------------------------

docker ps or docker container ls --> running containers

docker ps -a or docker container ls -a --> All the containers


How to start and stop containers?
----------------------------------

docker start <cid>

docker stop <cid>

How to delete containers?
--------------------------

docker rm <cid> --> for stopped state containers

docker rm -f <cid>  ---> for running containers

How to remove all conatners?
-----------------------------

docker rm -f <cid> <cid> ......

docker rm -f $(docker ps -q) --> It will remove all running conainers

docker rm -f $(docker ps -aq) --> It will remove all conainers


How to remove all stopeed conatainers?
--------------------------------------

docker container prune

docker rm -f $(docker ps --filter status="exited" -aq)


How to rename the container?
----------------------------

docker rename <cid/name> <new name>

how to restart the container?
-----------------------------

docker restart <cid/cname>



IQ: what is the difference between docker create and run?

IQ: What is port publish or port mapping in docker?


IQ: What is the difference between docker stop and docker kill?


docker stop: not force kill
docker kill: force kill

docker stop will send SIGTERM first and then SIGKILL, It will kill the process with grace period. Whereas docker kill will send SIGKILL call, It will kill the process without grace period.


How to pause the container process?
------------------------------------

docker pause <cid/cname>
docker unpause <cid/cname>

How to delete only paused containers?
-------------------------------------
docker rm -f $(docker ps --filter status="paused")

===============================================================================================


docker run --name ubuntucontainer ubuntu

docker ps -a

docker start ubuntucontainer


=====================================================================

How to create a container in interative mode?
---------------------------------------------

docker run -it --name test ubuntu /bin/bash



How to trobule shoot or debug application which is running as a container?
---------------------------------------------------------------------------

docker logs <cid/cname>

docker logs --tail <number_of_lines> <cid/cname>

docker logs -f <cid/cname>


How to go inside the container?
-------------------------------

docker exec -it <cid/name> /bin/bash


execute commands on running container
-------------------------------------

docker exec 5a7b9937d4df ls 

How to display whick process is running inside the container?
-------------------------------------------------------------

docker top <cid/cname>




How to display resource(RAM,CPU) details?
-----------------------------------------

docker stats <cid/cname>

IQ: Is it possible to allocate cutom memory?

Ans: Yes

docker run --memory="512m" -d -p 8082:8080 --name javawebapp2 kkeducation12345/java-web-app:1

docker run --memory="64m" -d -p 8082:8080 --name javawebapp2 kkeducation12345/java-web-app:1  --> Here container will be killed.

docker inspect <cid> --> OOMKilled



How to copy files from system to continer and container to system?
--------------------------------------------------------------------


docker cp javawebapp:/usr/local/tomcat/logs/catalina.2024-08-23.log catalina.2024-08-23.log


docker cp demo.txt javawebapp:/usr/local/tomcat/



IQ: what is the diff between COPY and docker cp?

COPY is a docker file instruction using this we can copy to the image while building files/folders 

docker cp Is a command copy files/dirs to container or to a system



what is the use of docker diff?
-------------------------------

docker diff <cid/cname>



what is docker commit?
-----------------------

docker commit <cid/cname> kkeducation12345/java-web-app:24


=================================================================================================================

How to inspect a container?
---------------------------

docker inspect <cid/cname>

docker inspect --format "{{.NetworkSettings.IPAddress}}" mavenapp

docker inspect --format "{{.State.Pid}}" 0d2dab452ceb

docker inspect --format "{{.NetworkSettings.IPAddress}},{{.State.Status}}" 0d2dab452ceb

docker inspect --format "IP Address: {{.NetworkSettings.Networks.bridge.IPAddress}}, Name: {{.Name}}" mavenapp



Dockerfile
==========

--> A Dockerfile is a text document containing a series of instructions on how to build a Docker image. It defines everything needed to create a containerized application, including the base image, the application code, and any necessary dependencies.

--> Docker runs these instructions from top to bottom 

--> These includes instructions like FROM,COPY, ADD, RUN, CMD, ENTRYPOINT, ARG, ENV, WORKDIR, EXPOSE, VOLUME,etc...

--> Instructions are not a case-sensitive , But use uppecase for better redability.

--> Default name of docker file is "Dockerfile"

Example:

FROM tomcat:8.0.21-jre8
COPY target/maven-web-application.war /usr/local/tomcat/webapps/maven-web-application.war
RUN echo "hello kk funda"



1. Base Image
-------------


FROM <image>:<tag>

--> Specifies the base image to use for the Docker image. 
--> This is the starting point from which your image is built. 
--> Common base images include official images for operating systems like Ubuntu or Alpine, or language-specific images like java or Node.js.



Example: FROM ubuntu:20.04


2. Maintainer (Optional)
------------------------


MAINTAINER <name> <email>

--> Provides information about the maintainer of the image. 
--> This instruction is now deprecated in favor of using LABEL, but it's still sometimes used in older Dockerfiles.


Example: MAINTAINER KK EDUCATION <kkeducationblr@gmail.com>


3. Labels (Metadata)
---------------------

LABEL <key>=<value> ...

Purpose: Adds metadata to the image in the form of key-value pairs. This can include information about the version, description, or any custom information you want to include.


Examples: 

LABEL version="1.0" description="A sample image"

LABEL company="KK EDUCATION"
LABEL mail="kkeducationblr@gmail.com"

NOTE: More than one LABEL will allow in image

4. Copy Files
-------------

COPY <src> <dest>

Purpose: Copies files or directories from the host machine to the image. The source path is relative to the build context (the directory containing the Dockerfile), and the destination path is inside the image.


Example: COPY target/mav
en-web-application.war /usr/local/tomcat/webapps/maven-web-application.war

         COPY . .
    
        COPY abc.tar /opt/



5. Add Files
------------

ADD <src> <dest>

Purpose: Similar to COPY, but with additional features like handling remote URLs and automatically extracting tar archives.


Example: ADD https://example.com/file.tar.gz /app/

         ADD abc.tar /opt/    -> untar 

6. RUN 
------
--> RUN instruction used to execute a commands/ scripts etc.
--> RUN instruction will be exuecuted while creating an image.
--> This instruction will be executed based on based image.
--> It can be executed in a two ways 1. shell form and 2. executable form.

use cases: 1. cretaing a directory
           2. execute a software
           3. unzip any zip file etc..
EX:
   shell form
   ----------
   RUN mkdir -p /opt/app
   RUN tar -xvzf /opt/apache-tomcat.tar.gz
   RUN useradd kkfunda
   RUN apt-get update && apt-get install git wget -y
   RUN ./setup.sh



   executable form
   ---------------
   RUN ["apt-get", "install", "-y", "vim"]
   RUN ["/bin/sh", "setup.sh"]
   RUN ["useradd","kkfunda"]

NOTE: please use shell form for RUN instructions, so we can replace variables easily.

7. CMD
------
--> CMD instruction used to execute a commands/ scripts etc.
--> CMD instruction will be exuecuted while creating a container.
--> This instruction will be executed based on based image.

EX:
   shell form
   ----------
   CMD sh app.sh
   CMD java -jar abc.jar

   executable form
   ---------------
   CMD ["sh", "app.sh"]
   CMD ["java", "-jar", "abc.jar"]


IQ] what is shell form and executable form in docker?

ANS:  RUN, CMD, ENTRYPOINT instructions can be defined in a shell form or executable form.

--> When we use shell form our command will be running as a "child process" under bash/sh (Shell)

  EX:  RUN java -jar app.jar

     --> In background above command will be executed as below
         
         /bin/sh -c java -jar app.jar
   [parent process]   [child process]

   NOTE: if you kill the parent process , It will not kill child process because some times child process connected 	 to DB.

   EX: RUN ["java", "-jar", "app.jar"]

     --> In background above command will be executed as below
      
         /bin/java -jar app.jar
         [parent process]

NOTE: when you are using CMD and ENTRYPOINT executable form is preferable.



IQ] what is the difference between RUN and CMD?

ANS:
  --> RUN instruction will be exuecuted while creating an image.
  --> CMD instruction will be exuecuted while creating a container.
  --> we have more than one RUN instruction in a Dockerfile. All the RUN instructions will be executed, while        	creating an image in the defined order (top to bottom).


CMD echo "one"
CMD echo "two"

IQ] can you have a more than one CMD in a Dockerfile?
 Ans: Yes you have, But only the last one/ recent one in the order will be executed while creating a container.

8. ENTRYPOINT
-------------

--> CMD instruction used to execute a commands/ scripts etc.
--> RUN instruction will be exuecuted while creating a container.
-->  ENTRYPOINT instruction used to execute a commands/ scripts etc.

EX: ENTRYPOINT java -jar app.jar  --> shell form

    ENTRYPOINT ["java", "-jar", "app.jar"]--> executable form


IQ] what is the difference between CMD and ENTRYPOINT?
ANS:

  --> CMD instructions are overriden while creating a container, But ENTRYPOINT instructions can't be overrriden while creating a container.
  --> Both the instructions are used to start our container.

IQ] can we keep both CMD and ENTRYPOINT instructions in a Dockerfile?

Ans: Yes, But CMD instructions will not be executed if both are present, CMD instructions will be passed as an argument to the ENTRYPOINT.

  EX: CMD ls
      ENTRYPOINT ["echo", "Hello"]

    --> It will be executed as below:
       
        /bin/echo Hello ls

       output: Hello ls

scenario: Our requirement always we have to execute sh catalina.sh, But argument by default it has to execute "start"

       Ex: CMD start
           ENTRYPOINT ["sh","catalina.sh"]

      /bin/sh catlina.sh start


CMD pwd
ENTRYPOINT ["echo","Hello"]

   /bin/echo Hello pwd



IQ] what is the difference between COPY and docker cp?

IQ] what is the difference between RUN and docker run?


===============================================================================================




Sample Docker File 1
---------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
RUN apt update -y
RUN apt install git wget tree -y
RUN mkdir -p /opt/app
RUN echo "welcome to kk devops"

docker build -t firstimage .


IQ] My dockerfile contains more layers ? How to reduse it ?

Ans: you can use && operator to merge all RUN instruction.


IQ] what is docker build cahce?


IQ] what if we delete all the images and again build the docker file? what happens?


Ans:  





















IQ] what is docker build cache?

docker build -t firstimage .
docker build -t firstimage .
docker build -t firstimage .

--> add some instructions and build to see the cache 

NOTE: if you add instruction at ending, previous instructions will be taken from build cache, But if you add any instruction in the middle, remaiining instructions will be re executed.

IQ] How to skip the build cache?

 docker build --no-cache -t firstimage1 .



sample Docker file 2
---------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

CMD ["date"]

 docker build -t firstimage1 .
 docker run --name firstc1 firstimage1

 docker start firstc1
 
 docker logs firstc1

sample Docker file 3
--------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

CMD ["date"]

CMD ["echo","java"]


sample Docker file 4
---------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

CMD sh test.sh

docker build -t imagetwo .  --> No error while building an image
docker run imagetwo  ---> sh: 0: cannot open test.sh: No such file


sample Docker file 5
--------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

CMD sh test.sh



===============================================================================


sample Docker file 6
---------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

ENTRYPOINT ["ls","-lrth"]


docker build -t imageone .
docker run imageone
docker run imageone date


sample dockerfile 7
-------------------

IQ] can we have a multiple ENTRYPOINT 's?


FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

ENTRYPOINT ["ls","-lrth"]
ENTRYPOINT ["date"]


sample dockerfile 8
--------------------

IQ] can we have both CMD and ENTRYPOINT?

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

CMD ["pwd"]
ENTRYPOINT ["echo","Welcome"]


---> show the ngnix and jenkins Dockerfiles

==============================================================================================




9. ARG instruction
-------------------

-->Using the ARG we can define arguments for Dockerfile. we can use these in another instruction.

--> you can define multiple arguments in a Dockerfile

--> ARG the only instruction that may precede FROM in a Docker file.

--> ARG values are not available after building an image, i.e Running container won't access the ARG values.






EX: ARG branchName=development

    LABEL branch $branchName

--> while creating an image we can pass ARG as below

    ARG baseImageTag
    FROM debian:$baseImageTag

    docker build -t <imageName> --build-arg  baseImageTag=12.0 .



Example :

ARG baseImageTag
FROM debian:$baseImageTag
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/application
RUN echo "welcome to kk devops"

docker build -t <imageName> --build-arg  baseImageTag=12.0 .

docker build -t <imageName> --build-arg  baseImageTag=11.0 .


Ex:

ARG baseImageTag=latest
FROM debian:$baseImageTag


==============================================================================


10. ENV
----------

--> ENV is used to set an environment variables, The are available for image and container.

EX:
 
     ENV CATALINE_HOME /usr/local/tomcat
     ENV JAVA_HOME /usr/bin/jdk8


EX:

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/app

ENV HOME /opt/app
RUN echo $HOME

RUN echo "welcome to kk devops"










docker build -t imageone .

docker inspect imageone


===============================================================================


11. WORKDIR
------------

--> we can set working directory for an image/conatiner.
--> All sebsequent instructions will be processed under working directory.
--> It is working like cd command


EX: WORKDIR /usr/local/tomcat


EX:

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
WORKDIR /opt/app
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/app
RUN echo "welcome to kk devops"


12. USR
-------

--> USR is used to set user for the container or image

EX: 

RUN echo "hello"

RUN useradd kkdevops

RUN  

USER kkdevops

RUN echo "devops"

--> By default root user if you are not mention.

--> It is working as "su" command




COPY abc.py /opt/abc.py ---> RUN cp abc.py /opt/abc.py









================================================

13. EXPOSE
----------

--> expose indicates which port is opened/used in the image.

  EX: EXPOSE 8080




===========================================================================
Docker Best Practices
--------------------

1. Try to use offical images only to build your own images(custom images)

2. try to use alpine images as base images where its possible/available.

3. Don't copy/add  unnecessary files/folders which are not required,  size of image will increase.

   --> Don't install unnecessary softwares also

COPY . .

4. Try to redue the number of layers of an image as much as possible, By combining related 	commands to RUN instruction.

5. Use multi stage docker builds to reduse the size and number of layers of a image.

6. Try to run container as a non-root user.

7. Run a shell script to remove unused and dangling images on daily basis.


docker build

docker push 

docker run 

docker rmi <image_Name>

docker pull



















Docker file 1
-------------

FROM nginx:alpine
COPY index.html /usr/share/nginx/html
NOTE: create index.html in build context






Docker file 2
--------------

FROM openjdk:11-jdk
WORKDIR /app
COPY target/maven-standalone-application*.jar maven-standalone-application.jar 
CMD ["java","-jar","maven-standalone-application.jar"]







Docker file 3 --> alpine example
-------------

FROM alpine:latest
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
WORKDIR /opt/app
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/app

ENV HOME /opt/app
RUN echo $HOME

CMD ["echo","Hello"]

--------

FROM alpine:latest
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
RUN apk update
RUN apk add git wget
CMD ["sh","test.sh"]








Docker file 4 --> Dont copy unnecessary file
----------------

FROM tomcat:8.0.21-jre8
COPY target/maven-web-application.war /usr/local/tomcat/webapps/maven-web-application.war
COPY . .


IQ] what is .dockerignore   file?

Ans:













Docker file 5 --> Reduse the number of layers
-------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
COPY test.sh test.sh
WORKDIR /opt/app
RUN apt update -y
RUN apt install git wget -y
RUN mkdir -p /opt/app
RUN echo "welcome to kk devops"





Docker file 6 ---> Try to run as a normal user
-------------

# Use the official Tomcat image as the base image
FROM tomcat:9.0

# Create a new user and group
RUN groupadd -r myusergroup && \
    useradd -r -m -g myusergroup -s /bin/bash kkdevops

# Change ownership of Tomcat directories to the new user
RUN chown -R myuser:myusergroup /usr/local/tomcat && \
    chmod -R 755 /usr/local/tomcat

# Switch to the new user
USER kkdevops

# Optionally, add custom configuration or application files
# COPY ./my-app.war /usr/local/tomcat/webapps/

# Expose the port Tomcat runs on
EXPOSE 8080

# Set the default command to run Tomcat
CMD ["catalina.sh", "run"]

--------------

FROM test3:latest

# Switch to root user
USER root


Docker file 7  ---> Multi stage Docker file
--------------

FROM tomcat:8.5.41-jdk8
RUN apt install maven -y
WORKDIR /app
COPY . .
RUN mvn clean package
WORKDIR /usr/local/tomcat
RUN cp /app/target/maven-web-app*.war /usr/local/tomcat/maven-web-app.war



-----------

FROM maven:3.8.6-openjdk-8 as aaa
WORKDIR  /app
COPY . .
RUN mvn clean package

FROM tomcat:8.0.20-jre8
COPY --from=aaa /app/target/maven-web-app*.war /usr/local/tomcat/webapps/maven-web-app.war


==============================================


once we build image and mapped with container, then after some time we need to change or add instructions in docker file ,then we rebuild image after changes in docker file, again we need to create new container and map with that image?


Dockerfile

-
-


nexus.jio.com/jio_stage:1_0_1   --> jio


Dockerfile 

  nexus.jio.com/jio_stage:1_0_2---> jio_new

-


docker compose
===============

--> Docker-compose is a tool, Used to define and run the multi container docker applications.

--> IT is in YAML[yet another markup lang] format.

--> default file name docker-compose.yaml or docker-compose.yml or compose.yaml or compose.yml

EX: spring boot app with mongo db


docker run -d --name springapp --network jio -p 8080:8080 -e MONGO_DB_HOSTNAME=mongo -e MONGO_DB_USERNAME=devdb -e MONGO_DB_PASSWORD=dev@123 kkeducationb2/springimage

docker run -d --name mongo -v jiovolume:/data/db --network jio -e MONGO_INITDB_ROOT_USERNAME=devdb -e MONGO_INITDB_ROOT_PASSWORD=dev@123 mongo


IQ] app or DB we need to down first?

ans:

How to write docker compose file?
=================================

version:
services:
volumes:
networks:



EX:
---

version: "3"
services:
  springapp:
    image: kkeducationb2/springimage
    ports:
    - 8080:8080
    depends_on:
    - mongo
    networks:
    - jio
    environment:
    - MONGO_DB_HOSTNAME=mongo
    - MONGO_DB_USERNAME=devdb
    - MONGO_DB_PASSWORD=dev@123
  mongo:
    image: mongo
    networks:
    - jio
    environment: 
    - MONGO_INITDB_ROOT_USERNAME=devdb
    - MONGO_INITDB_ROOT_PASSWORD=dev@123
    volumes:
    - jiovolume:/data/db
networks:
 jio:
  driver: bridge
volumes:
  jiovolume:
  


How to save a file?
-------------------

docker-compose.yaml

How to see the version?
-----------------------

docker-compose version


How to install docker-compose?
------------------------------

sudo apt install docker-compose

How to check the syntax?
------------------------
docker-compose config


How to run docker-compose?
---------------------------

docker-compose up -d


how to stop ?
-------------
docker-compose down 


How to see containers?
----------------------

docker-compose ps -a

How to see the images?
----------------------

docker-compose images

































































  







   
   











   
   
















































 























































































